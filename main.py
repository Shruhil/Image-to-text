# -*- coding: utf-8 -*-
"""DC.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1M1MKFQDszui4H9QiXkywOUMjcc4iJ-wo

# New Section

<u>
<h4>Import modules</h4>
</u>
"""

import os # To import test image files
import cv2 # To work with opencv images
from PIL import Image # Image submodule to work with pillow images
!sudo apt install tesseract-ocr
!pip install pytesseract
import pytesseract as pt # pytesseract module

extracted_dir = "DC"
if os.path.exists(extracted_dir):
    test_image_files = os.listdir(extracted_dir)

    for f in test_image_files:
        print(f)
else:
    print(f"Directory '{extracted_dir}' does not exist.")

def show_image(img_path, size=(500, 500)):
    image = cv2.imread(img_path)
    image = cv2.resize(image, size)

    cv2.imshow("IMAGE", image)
    cv2.waitKey(0)
    cv2.destroyAllWindows()

"""<u>
<h4>Configure tesseract path in implementations (No need to add in to the PATH explicitly)</h4>
</u>
"""

# Specify the path to the Tesseract executableexe
pt.pytesseract.tesseract_cmd = '/content/tesseract.exe'



!pip install pytesseract

!which tesseract

import os
os.environ['PATH'] += '/content/tesseract.exe'

import pytesseract as pt

avb_langs = pt.get_languages(config='')

for lang in avb_langs:
    print(lang)

!pip install pytesseract

"""<u>
<h4>Extract text from an image : Simple</h4>
</u>
"""

image_path = '/content/dc_image1.png'  # Example image path

# Open the image
image = Image.open(image_path)

# Perform OCR
text = pt.image_to_string(image)

# Print the extracted text
print(text)

"""<u>
    <h4>Extract text from an image : Specifying a language</h4>
</u>
<p>Check out <a href='https://github.com/tesseract-ocr/tessdata/tree/3.04.00'>here</a> to download different language data files.</p>
"""

path = create_path("portu-text-2.jpg")

image = Image.open(path)
text = pt.image_to_string(image, lang='por')

print(text)
show_image(path)

"""<u>
    <h4>Extract text from an image : Multiple images once</h4>
</u>
"""

img_name_txt_file = "../test images/image-paths.txt"
text = pt.image_to_string(img_name_txt_file, lang='jpn')

print(text)

"""<u>
    <h4>Extract text from an image : Timeout extraction</h4>
</u>
"""

path = create_path("news-2.jpg")

image = Image.open(path)
text = 'NO TEXT TO BE APPEARED'

try:
    text = pt.image_to_string(image, lang='eng', timeout=5)
except RuntimeError as timeout_error:
    print("[TIMEOUT ERROR]")

print(text)
show_image(path)

"""<u>
    <h4>Get bounding box estimates</h4>
</u>
"""

path = create_path("jap-text-1.png")

image = Image.open(path)
bound_rects = pt.image_to_boxes(image, lang='jpn')

print(bound_rects)
show_image(path)

img = cv2.imread(path)
h, _, _ = img.shape

for b in bound_rects.splitlines():
    b = b.strip().split(' ')
    img = cv2.rectangle(img, (int(b[1]), h - int(b[2])), (int(b[3]), h - int(b[4])), (0, 255, 0), 2)

cv2.imshow("CHARACTERIZED IMAGE", img)
cv2.waitKey(0)
cv2.destroyAllWindows()

"""<u>
    <h4>Get verbose data including boxes, confidences, line and page numbers</h4>
</u>
"""

image_path = test_image_files[2]
path = create_path(image_path)

image = Image.open(path)
text = pt.image_to_data(image)

print(text)
show_image(path)

"""<u>
    <h4>Get information about orientation and script detection</h4>
</u>
"""

image_path = "hindi-text-1.jpg" # news-2.jpg hindi-news-1.jpg hindi-news-2.jpg hindi-text-1.jpg
path = create_path(image_path)

print(pt.image_to_osd(path, lang='hin'))

"""<u>
    <h4>Convert in to different file formats (PDF, XML, HOCR)</h4>
</u>
"""

image_path = "news-2.jpg"
path = create_path(image_path)
file_save_path = "../files/"

pdf = pt.image_to_pdf_or_hocr(path, extension='pdf')

file = open(os.path.join(file_save_path, "pdf-content.pdf"), 'w+b')
file.write(pdf)
file.close()

# hocr: open standard of data representation for formatted text obtained from (OCR)
hocr = pt.image_to_pdf_or_hocr(path, extension='hocr')

file = open(os.path.join(file_save_path, "hocr-content.html"), 'w+b')
file.write(hocr)
file.close()

xml = pt.image_to_alto_xml(path)

file = open(os.path.join(file_save_path, "xml-content.xml"), 'w+b')
file.write(xml)
file.close()

"""<u>
    <h4>Forcefully assigning different assumptions (Custom Configurations)</h4>
</u>
"""

image_path = "abc-text.jpg"
path = create_path(image_path)
custom_oem_psm_config = r'--oem 3 --psm 9'

image = Image.open(path)
pt.image_to_string(image, config=custom_oem_psm_config)

"""<h4>References</h4><hr>

<ul>
    <li><a href='https://github.com/tesseract-ocr/tesseract'>Tesseract</a></li>
    <li><a href='https://github.com/madmaze/pytesseract'>Pytesseract</a></li>
    <li><a href='https://www.py4u.net/discuss/10850'>Multiple config options</a></li>
    <li><a href='https://stackoverflow.com/questions/20831612/getting-the-bounding-box-of-the-recognized-words-using-python-tesseract'>Getting bounding box cordinates</a></li>
</ul>
"""

